/*
 *  GPL LICENSE SUMMARY
 *
 *  Copyright(c) 2009-2010 Intel Corporation. All rights reserved.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of version 2 of the GNU General Public License as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
 *  The full GNU General Public License is included in this distribution
 *  in the file called LICENSE.GPL.
 *
 *  Contact Information:
 *    Intel Corporation
 *    2200 Mission College Blvd.
 *    Santa Clara, CA  97052
 *
 */



/*---------------------------------------------------------------------------
* PURPOSE
*  Brief Description of the overall implementation strategy used in the module.
*  Platform specific implementation details and
*  optimization strategies (if any)
*  should be described.
*
* HISTORY (Version, Date, Author, Note)
*------------------------------------------------------------------------------
*   Ver.0.01   13/5/08  GNV     Intial Draft
*
******************************************************************************/

/* ----------------------------------------------------------------------- */
/* Headers.                                                                */
/* ----------------------------------------------------------------------- */

//Standard Header Files
#include <linux/module.h>
#include <linux/init.h>
#include <linux/version.h>
#include <linux/errno.h>
#include <linux/interrupt.h>
#include <asm/io.h>
#include <linux/fs.h>
#include <linux/mm.h>
#include <linux/sched.h>
#include <asm/uaccess.h>
#include <linux/vmalloc.h>
#include <linux/mman.h>
#include <linux/slab.h>

//Custom Header Files
#include "HAL_Dma.h"



/* ----------------------------------------------------------------------- */
/* Macros.                                                                 */
/* ---------------------------------------------------------------------- */
#define REALVIEW_TC11MP_GIC_BASE 0x1F000100
MODULE_LICENSE("GPL");
MODULE_AUTHOR("BSP");
MODULE_DESCRIPTION("DMA Driver");
/* -------------------------------------------------------------------- */
/* Global Variables                                                */
/* -------------------------------------------------------------------- */

irqreturn_t (*dma_interrupt )(INT32 irq,
                              VOID *dev_id,
                              struct pt_regs *regs);

/* ----------------------------------------------------------------- */
/* External Variables                                           */
/* ----------------------------------------------------------- */

extern UINT32 DMA_CONTEXT_BASE_ADDR[];

/* -------------------------------------------------------------------- */
/* Internal prototypes.                                              */
/* ---------------------------------------------------------------- */

static INT32 HAL_Dma_Drv_Open (struct inode *inode, struct file *file);
static INT32 HAL_Dma_Drv_Release (struct inode *inode, struct file *file);
static ssize_t HAL_Dma_Drv_Read ( struct file *file,
                                  char *buf,
                                  size_t count,
                                  loff_t *ppos);

static ssize_t HAL_Dma_Drv_Write (struct file *file,
                                  const char *buf,
                                  size_t count,
                                  loff_t *ppos);

static INT32 HAL_Dma_Drv_Ioctl(   struct inode *inode,
                                      struct file *file,
                                      UINT32 cmd,
                                      ULONG arg) ;

static INT32 __init HAL_Dma_Drv_Init (VOID);
static VOID __exit HAL_Dma_Drv_Exit (VOID);

/* ------------------------------------------------------------------- */
/* Function Definations.                                                */
/* ------------------------------------------------------------------ */


// open function - called when the "file" /dev/DMADriver is opened in userspace
static INT32 HAL_Dma_Drv_Open (struct inode *inode, struct file *file)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering.....");

    return retval;
}//HAL_Dma_Drv_Open()

// close function - called when "file" /dev/DMADriver is closed in userspace
static INT32 HAL_Dma_Drv_Release (struct inode *inode, struct file *file)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering.....");


    return retval;
}//HAL_Dma_Drv_Release()

// read function called when from /dev/DMADriver is read
static ssize_t HAL_Dma_Drv_Read (struct file *file,
                                 char *buf,
                                 size_t count,
                                 loff_t *ppos)
{
    INT32 retval = HAL_SUCCESS;

    return retval;
}//HAL_Dma_Drv_Read()

// write function called when to /dev/DMADriver is written
static ssize_t HAL_Dma_Drv_Write (struct file *file, const char *buf,
        size_t count, loff_t *ppos)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering.....");

    return retval;
}//HAL_Dma_Drv_Write()

// ioctl - I/O control
static INT32 HAL_Dma_Drv_Ioctl(struct inode *inode, struct file *file,
        UINT32 cmd, ULONG arg)
{
    INT32 retval = HAL_SUCCESS;


    DPRINTK("Entering..... Command: %d", cmd);



    switch (cmd)
    {

        break;
    }

    return retval;
}//HAL_Dma_Drv_Ioctl()



// define which file operations are supported
struct file_operations dma_drv_fops = {
                .owner      =   THIS_MODULE,
                .llseek     =   NULL, /* GNV: TBD  */
                .read       =   HAL_Dma_Drv_Read,
                .write      =   HAL_Dma_Drv_Write,
                .ioctl      =   HAL_Dma_Drv_Ioctl,
                .open       =   HAL_Dma_Drv_Open,
                .release    =   HAL_Dma_Drv_Release,
};

//Module init routine. Registers driver and calls driver setup.
static INT32 __init HAL_Dma_Drv_Init (VOID)
{
    INT32 retval = HAL_SUCCESS;
    //dma_interrupt =  HAL_Dma_Interrupt ;
    DPRINTK("Entering .....");

    /*
     * 1. Regsister as Char Driver
     * 2.Request IRQ for interrupt (INT7)
     * 3. Setup DMA
     */
    //1. Regsister as Char Driver
    retval = register_chrdev (DRIVER_MAJOR, DRIVER_NAME, &dma_drv_fops);
    if (retval != 0) return - EIO;

    PRINT_DRV_INFO();
    DPRINTK("create the device entry in /dev ");
    DPRINTK("mknod -m 666 /var/%s c %d 0", DRIVER_NAME, DRIVER_MAJOR);

    //3. Setup DMA
    HAL_Dma_Setup();

    return HAL_SUCCESS;
}//HAL_Dma_Drv_Init()


// close and cleanup module
static VOID __exit HAL_Dma_Drv_Exit (VOID)
{

    DPRINTK("Entering .....");

  /*
     * 1. Release All DMA Context
     * 2. Unregister as Char Driver
     */

    //2.unmap and release all mapped and requested region
    HAL_Dma_Release();

    //1.Unregister driver
    unregister_chrdev(DRIVER_MAJOR, DRIVER_NAME);

}//HAL_Dma_Drv_Exit()




module_init(HAL_Dma_Drv_Init);
module_exit(HAL_Dma_Drv_Exit);
