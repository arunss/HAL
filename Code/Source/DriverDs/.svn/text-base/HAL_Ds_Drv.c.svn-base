/*
 *  GPL LICENSE SUMMARY
 *
 *  Copyright(c) 2009-2010 Intel Corporation. All rights reserved.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of version 2 of the GNU General Public License as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
 *  The full GNU General Public License is included in this distribution
 *  in the file called LICENSE.GPL.
 *
 *  Contact Information:
 *    Intel Corporation
 *    2200 Mission College Blvd.
 *    Santa Clara, CA  97052
 *
 */


/*-----------------------------------------------------------------------------
* PURPOSE
*  Brief Description of the overall implementation strategy used in the module.
*  Platform specific implementation details and optimization strategies (if any)
*  should be described.
*
* HISTORY (Version, Date, Author, Note)
*------------------------------------------------------------------------------
*   Ver.0.01   13/5/08  GNV     Intial Draft
*
******************************************************************************/

/* --------------------------------------------------------------------------*/
/* Headers.                                                                  */
/* --------------------------------------------------------------------------*/

//Standard Header Files
#include <linux/module.h>
#include <linux/init.h>
#include <linux/version.h>
#include <linux/errno.h>
#include <linux/interrupt.h>
#include <asm/io.h>
#include <linux/fs.h>
#include <linux/mm.h>
#include <linux/sched.h>
#include <asm/uaccess.h>
#include <linux/vmalloc.h>
#include <linux/mman.h>
#include <linux/slab.h>

//Custom Header Files
#include "HAL_Ds.h"


/* --------------------------------------------------------------------------*/
/* Macros.                                                                   */
/* --------------------------------------------------------------------------*/

MODULE_LICENSE("GPL");
MODULE_AUTHOR("GNV");
MODULE_DESCRIPTION("DS Driver");





/* --------------------------------------------------------------------------*/
/* Internal prototypes.                                                      */
/* --------------------------------------------------------------------------*/

static INT32 HAL_Ds_Drv_Open (struct inode *inode, struct file *file);
static INT32 HAL_Ds_Drv_Release (struct inode *inode, struct file *file);
static ssize_t HAL_Ds_Drv_Read (struct file *file, char *buf,
        size_t count, loff_t *ppos);
static ssize_t HAL_Ds_Drv_Write (struct file *file, const char *buf,
        size_t count, loff_t *ppos);
static INT32 HAL_Ds_Drv_Ioctl(struct inode *inode, struct file *file,
   UINT32 cmd, ULONG arg);

static INT32 __init HAL_Ds_Drv_Init (VOID);
static VOID __exit HAL_Ds_Drv_Exit (VOID);

static INT32 G_drv_major = 0;
/* --------------------------------------------------------------------------*/
/* Function Definations.                                                     */
/* --------------------------------------------------------------------------*/




// open function - called when the "file" /dev/I2CDriver is opened in userspace
static INT32 HAL_Ds_Drv_Open (struct inode *inode, struct file *file)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering.....");

    return retval;
}

// close function - called when the "file" /dev/I2CDriver is
//  closed in userspace
static INT32 HAL_Ds_Drv_Release (struct inode *inode, struct file *file)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering.....");


    return retval;
}

// read function called when from /dev/I2CDriver is read
static ssize_t HAL_Ds_Drv_Read (struct file *file, char *buf,
        size_t count, loff_t *ppos)
{
    INT32 retval = HAL_SUCCESS;

    return retval;
}

// write function called when to /dev/I2CDriver is written
static ssize_t HAL_Ds_Drv_Write (struct file *file, const char *buf,
        size_t count, loff_t *ppos)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering.....");

    return retval;
}




// define which file operations are supported
struct file_operations ds_drv_fops = {
                .owner      =   THIS_MODULE,
                .llseek     =   NULL, /* GNV: TBD  */
                .read       =   HAL_Ds_Drv_Read,
                .write      =   HAL_Ds_Drv_Write,
                .ioctl      =   HAL_Ds_Drv_Ioctl,
                .open       =   HAL_Ds_Drv_Open,
                .release    =   HAL_Ds_Drv_Release,
};


static INT32 __init HAL_Ds_Drv_Init (VOID)
{
    INT32 retval = HAL_SUCCESS;

    DPRINTK("Entering .....");

    /*
     * 1. Regsister as Char Driver
     *
     */

    retval = register_chrdev (DRIVER_MAJOR, DRIVER_NAME, &ds_drv_fops);
    if (retval < 0) return - EIO;

    G_drv_major = retval;

    PRINT_DRV_INFO();
    DPRINTK("create the device entry in /var ");
    DPRINTE("mknod -m 666 /var/%s c %d 0", DRIVER_NAME, DRIVER_MAJOR);

    return HAL_SUCCESS;
}


// close and cleanup module
static VOID __exit HAL_Ds_Drv_Exit (VOID)
{

    DPRINTK("Entering .....");

    /*
     * 1. Unregister as Char Driver
     * 2. Release All DMA Context
     */

    //1.Unregister driver
    unregister_chrdev(DRIVER_MAJOR, DRIVER_NAME);

#if DS_INT_ENABLE
    free_irq(101, (PVOID)NULL);
#endif

    //2.unmap and release all mapped and requested region
    //DOCS_I2C_OSM_Release();

}


static INT32 HAL_Ds_Drv_Ioctl(struct inode *inode, struct file *file,
   UINT32 cmd, ULONG arg)
{
  INT32 retval = HAL_SUCCESS;
  INT32 TunerNo, FreqCw;
  ULONG argAddr = arg;

  DPRINTK("Entering..... Command %d \n", cmd);


  switch (cmd)
  {
    case CMD_DS_TUNE_FREQ:

      if (copy_from_user(&TunerNo, (INT32*)argAddr, sizeof(INT32)))
        return -EFAULT;

      argAddr+=4;

      if (copy_from_user(&FreqCw, (INT32*)argAddr, sizeof(INT32)))
        return -EFAULT;

      HAL_Ds_Tune_Frequency(TunerNo, FreqCw);
      //HAL_Set_Ds_Frequency(TunerNo, FreqCw);
      break;

    case CMD_DS_HW_INIT:

      HAL_Ds_Hardware_Init();
      break;

  }


  return retval;

}

module_init(HAL_Ds_Drv_Init);
module_exit(HAL_Ds_Drv_Exit);
